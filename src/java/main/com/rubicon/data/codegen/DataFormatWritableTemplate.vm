package $package;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;

import com.rubicon.data.format.DataFormatWrapper;
import com.rubicon.data.format.DataFormatWritable;

/**
 * GENERATED CLASS! MODIFY AT YOUR OWN RISK!
 */
@DataFormatWrapper(wrapped = ${dataFormatClassName}.class)
public class $className implements DataFormatWritable<$dataFormatClassName>,
			Writable, WritableComparable<$className> {
	private $dataFormatClassName data;

	public $className() {
	}

	public $className($dataFormatClassName data) {
		this.data = data;
	}

	public $dataFormatClassName get() {
		return this.data;
	}

	public void set($dataFormatClassName data) {
		this.data = data;
	}

	public void readFields(DataInput in) throws IOException {
		this.data = new $dataFormatClassName();
#foreach($setter in $setters)
		this.data.${setter.method.name}((${setter.setType}) ${setter.annotation.type().getName()}.INSTANCE.read(in));
#end
	}

	public void write(DataOutput out) throws IOException {
#foreach ($getter in $getters)
		${getter.annotation.type().getName()}.INSTANCE.write(out, this.data.${getter.method.name}());
#end
	}

	public int compareTo($className o) {
		int result = 0;
		$dataFormatClassName odata = o.get();
#foreach ($getter in $getters)
		result = ${getter.annotation.type().getName()}.INSTANCE.compare(
			this.data.${getter.method.name}(),
			odata.${getter.method.name}()
		);
		if (result != 0)
			return result;
#end
		return result;
	}

	public String toString() {
		return this.data.toString();
	}
}